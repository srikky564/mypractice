{"version":3,"sources":["registerServiceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","containers/actions.js","containers/constants.js","containers/reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","err","info","this","setState","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","item","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payLoad","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8748e657.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ( { name, email, id } ) =>\n{\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={ `https://robohash.org/${ id }?size=200x200` } />\n      <div>\n        <h2>{ name }</h2>\n        <p>{ email }</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( { robots } ) =>\n{\n\n    return (\n        <div>\n            {\n                robots.map( ( robot, i ) =>\n                {\n                    return (\n                        < Card\n                            key={ i }\n                            id={ robot.id }\n                            name={ robot.name }\n                            email={ robot.email } />\n                    )\n                } )\n            }\n        </div>\n    )\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( { searchField, searchChange } ) =>\n{\n    return (\n        <div className='pa2'>\n            <input\n                aria-label=\"search robos\"\n                className='pa1 ba b--green bg-light-blue' type=\"search\" placeholder=\"search robos\"\n                onChange={ searchChange } />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = ( props ) =>\n{\n    return (\n        <div style={ { overflowY: 'scroll', border: '5px solid black', height: '600px' } }>\n            {props.children }\n        </div>\n    );\n}\n\nexport default Scroll;","\nimport React, { Component } from 'react';\nclass ErrorBoundary extends Component \n{\n    constructor ( props )\n    {\n        super( props )\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch ( err, info )\n    {\n        this.setState( { hasError: true } );\n    }\n\n    render ()\n    {\n        const { hasError } = this.state;\n        if ( hasError )\n        {\n            return <h1>Oops something went Wrong</h1>\n        }\n        else\n        {\n            return this.props.children;\n        }\n    }\n}\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField, requestRobots } from './actions.js'\n\nconst mapStateToProps = state =>\n{\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\nconst mapDispatchToProps = dispatch =>\n{\n    return {\n        onSearchChange: ( event ) => dispatch( setSearchField( event.target.value ) ),\n        onRequestRobots: () => dispatch( requestRobots() )\n    }\n}\nclass App extends Component \n{\n    componentDidMount ()\n    {\n        this.props.onRequestRobots();\n\n    }\n\n    render ()\n    {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(\n            item =>\n                item.name.toLowerCase().includes( searchField.toLowerCase() )\n        )\n        return isPending ? ( <h1>Loading ...</h1> ) :\n            (\n                <div className=\"tc\">\n                    <h1 className=\"f1\">Robofriends</h1>\n                    <SearchBox searchField={ searchField } searchChange={ onSearchChange }></SearchBox>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={ filteredRobots } />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n\n\n    }\n\n}\n\n\n\nexport default connect( mapStateToProps, mapDispatchToProps )( App );","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js'\n\nexport const setSearchField = ( text ) =>\n    ( {\n        type: CHANGE_SEARCH_FIELD,\n        payLoad: text\n    }\n    )\nexport const requestRobots = () => ( dispatch ) =>\n{\n    dispatch( { type: REQUEST_ROBOTS_PENDING } );\n    fetch( 'https://jsonplaceholder.typicode.com/users' )\n        .then( response => response.json() )\n        .then( data => dispatch( { type: REQUEST_ROBOTS_SUCCESS, payLoad: data } ) )\n        .catch( error => dispatch( { type: REQUEST_ROBOTS_FAILED, payLoad: error } ) );\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js'\n\nconst initialStateSearch = {\n    searchField: \"\"\n};\nexport const searchRobots = ( state = initialStateSearch, action = {} ) =>\n{\n    switch ( action.type )\n    {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payLoad };\n        default:\n            return state;\n    };\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\nexport const requestRobots = ( state = initialStateRobots, action = {} ) =>\n{\n    switch ( action.type )\n    {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payLoad, isPending: false };\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payLoad, isPending: false };\n        default:\n            return state;\n    };\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './containers/reducer';\nconst rootReducer = combineReducers( { searchRobots, requestRobots } )\nconst logger = createLogger();\nconst store = createStore( rootReducer, applyMiddleware( thunkMiddleware, logger ) );\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>\n\n    , document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}